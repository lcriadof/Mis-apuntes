# tipos de datos


----------------
-- tuplas
----------------
Una tupla es una secuencia de valores de cualquier tipo indexada por enteros. Las tuplas son inmutables —tienen una longitud fija y no pueden cambiarse sus elementos— y son comparables. Sintácticamente, una tupla es una lista de valores separados por comas y encerradas entre paréntesis.
Por ejemplo, t=("a","b","c","d","e","f")

Para crear una tupla con un único elemento, es necesario incluir una coma al final.
p = (4,)

No se pueden modificar los elementos de una tupla, pero se puede reemplazar una tupla por otra.

La función len() calcula la longitud de una tupla.


t=(1, "Enero", 2019)
t[0]    # Devuelve 1
t[1]    # Devuelve Enero
t[2]    # Devuelve 2019


ejemplo:
t = tuple()
print (t)
t = tuple("supercalifragilisticoespialidoso")
print (t)

t = (3, 5, "c", "d", "e")
print ( t[0] )     #3
print ( t[1:3] )   # (5, 'c')
print ( t[3] )     # d
print ( t[2:5] )   # ('c', 'd', 'e')

(0,1,2) < (0,1,2)       # False
(0,1,2) == (0,1,2)      # True


--------------
-- Listas
--------------

El método más simple para crear una lista es encerrar los elementos entre corchetes. Por ejemplo, t = [10, 20, 30, 40]

t = [10, 20, 30, 40]
t[2]          # Devuelve 30

A diferencia de las tuplas las listas son mutables

numeros = [17, 123]
print (numeros)  # [17, 123]
numeros[1] = 5
print (numeros)  # [17, 5]

Los elementos en una lista no tienen por qué ser todos del mismo tipo. Por ejemplo:
t = ["casa", 3.0, 5, [11, 20]]

Cuando una lista está dentro de otra, se dice que está anidada. En una lista anidada, cada lista interna solo cuenta como un único elemento. Por ejemplo:
t = [1, 2, 3, [4, 5, 6]]
print(t[3])   # [4, 5, 6]

Soporta indexación con números negativos que permite seleccionar por el final de la lista. Por ejemplo:
t[-1]   # Devuelve [4, 5, 6]

El operador + concatena listas.
a = [1, 2, 3]
b = [4, 5, 6]
c = a + b
print (c)    # Devuelve [1, 2, 3, 4, 5, 6]

El operador in permite preguntar la pertenencia de un elemento a una lista.
a = [1, 2, 3]
2 in a        # True
5 in a        # False

Recorrer elementos de una lista
a = [1, 2, 3]
for x in a:
   print (x)

Eliminación de elementos
del a[1]
print(a)   # [1, 3]

Suma (sum) sobre los elementos de una lista
t = [1, 2, 3, 4, 5, 6]
print(sum(t))        # Devuelve 21

Elementos máximos y mínimos
print ( max(t), min (t) )   # Devuelve 6 y 1

Longitud de la lista
len(t)

Creación de una secuencia
lista =  range (-3,3)
for i in lista:
    print (i)           # Devuelve -3 -2 -1 0 1 2

Añadir elementos
a.append(117)
print(a)   #  [1, 3, 117]

Ordenación de elementos
t = ["d","e","a","c","x"]
t.sort()  # # Devuelve ['a', 'c', 'd', 'e', 'x']

Extracción de elementos
t = ["d","e","a","c","x"]
x = t.pop(1)
print (t)      # Devuelve ['d', 'a', 'c', 'x']
print (x)      # Devuelve e




Listas por compresión:
  Es una expresión compacta para definir listas, conjuntos y diccionarios en Python. Se trata de definir cada uno de los elementos sin tener que nombrar cada uno de ellos.
  La forma general es: [exp for val in <coleccion> if <condicion>]


lista = [x for x in [3,4,5]]
print(lista)   # Devuelve [3, 4, 5]

lista = [x+5 for x in [3,4,5] if x > 3]
print(lista)  # Devuelve [9, 10]

lista = [x+2 for x in range (0,10) if x > 3]
print(lista)    # Devuelve [6, 7, 8, 9, 10, 11]

letras   = ['a','b','g','h','n']
mayusculas = [ a.upper() for a in letras ]
mayúsculas         # Devuelve ['A', 'B', 'G', 'H', 'N']

lista = [ y for x,y in [(1,2),(3,4),(5,6)]]
print(lista)     # Devuelve [2, 4, 6]

T=[int(n*(n+1)/2) for n in L]
print(T)  # [1, 3, 6, 10, 15]

--------------
-- Cadenas
--------------
Una cadena es una secuencia de caracteres y una lista es una secuencia de valores, pero una lista de caracteres no es lo mismo que una cadena. Para convertir desde una cadena a una lista de caracteres, se puede usar la función list, que divide una cadena en letras individuales.

s = "casa"  # esto es una cadena
print(s)
t = list (s) # esto es una lista
print (t)    # Devuelve ['c', 'a', 's', 'a']

dividir una cadena en palabras, puedes usar el método split.
s = "El camión rojo de Juan"
tokens = s.split()
print (tokens)          # ['El', 'camión', 'rojo', 'de', 'Juan']
print(tokens[0])        # El

s = "El-camión-rojo-de-Juan"
t = s.split("-")
print (t)          #  ['El', 'camión', 'rojo', 'de', 'Juan']


Concatenar a partir de una lista en una variable de cadena
s = ['El', 'camión', 'rojo', 'de', 'Juan']
delimitador = " "
delimitador.join(s)               # Devuelve 'El camión rojo de Juan'
delimitador = "-"
delimitador.join(s)               # Devuelve 'El-camión-rojo-de-Juan


--------------
-- Diccionarios
--------------
Un diccionario es una colección no ordenada de pares clave-valor donde la clave y el valor son objetos que pueden ser de (casi) cualquier tipo. La función dict () crea un diccionario nuevo sin elementos.

diccionario = dict()  # inicializamos
diccionario = {} # otra forma de inicializar diccionario

diccionario["nombre"] = "Luis"
print(diccionario)  # {'nombre': 'Luis'}

len: La función len devuelve el número de parejas clave-valor
in:  El operador in dice si algo aparece como clave en el diccionario.
   ejemplo2 = {"primero":"Libro","segundo":34,"tercero":(3,4)}
   "primero" in ejemplo2                        # True
get: Toma una clave y un valor por defecto. Si la clave aparece en el diccionario get, devuelve el valor correspondiente. En caso contrario, devuelve el valor por defecto.
   contadores = {"naranjas":1, "limones":42, "peras":100}
   print ( contadores.get("uvas",0))       # Devuelve 0
   print (contadores.get("naranjas",0))    # Devuelve 1
keys: Crea una lista con las claves de un diccionario.
   contadores = {"naranjas":1, "limones":42, "peras":100}
   contadores.keys()            # dict_keys(['naranjas', 'limones', 'peras'])
items: Devuelve una lista de tuplas, cada una de las cuales es una pareja clave-valor sin ningún orden definido.
   contadores = {"naranjas":1, "limones":42, "peras":100}
   t = contadores.items();
   t   # dict_items([('naranjas', 1), ('limones', 42), ('peras', 100)])



b=[1,2,3,4,5]
c=["a","b","c","d","e"]
dict(zip(b,c))
{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e'}