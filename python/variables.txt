-- comentarios
#

-- variables
mensaje="Esto es un mensaje de prueba"
n=17
pi=3.1415926535897931
print(mensaje)
print(n)
print(pi)

lado = 3
area = lado * lado
print ("El área de un cuadrado que mide ",lado, "cm por lado es ",area)
Python reserva 31 palabras clave para su propio , que se pueden obtener con este código:
import keyword
print(keyword.kwlist)

-- tipos
int: enteros.
float: números reales.
bool: valores booleanos: cierto y falso.
str: cadenas.
None: corresponde al valor nulo.

-- dataframes
import pandas as pd

# Conjunto de datos con las factorias
x = [[80, 'Factoria 1'], [79, 'Factoria 2'], [83, 'Factoria 3'],
     [84, 'Factoria 1'], [78, 'Factoria 2'], [60, 'Factoria 3'],
     [82, 'Factoria 1'], [85, 'Factoria 2'], [79, 'Factoria 3'],
     [84, 'Factoria 1'], [80, 'Factoria 2'], [62, 'Factoria 3']]
y = [[300], [302], [315], [330], [300], [250], [300], [340], [315], [330], [310], [240]]

# Conversion de las datos a DataFrame
x_0 = pd.DataFrame(x, columns = ['Horas', 'Factoria'])
y = pd.DataFrame(y)

# Creación de variables dummies
x = pd.concat([x_0['Horas'], pd.get_dummies(x_0['Factoria'])], axis = 1)

# Polinomio de grado 5
model_dummies = LinearRegression(fit_intercept = False)
model_dummies.fit(x, y)

print("Modelo dummies - R^2:", model_dummies.score(x, y))




-- operaciones

Ademas de la simbilogía normal tenemos

i//j  # cociente de la division entera
i%j   # resto de la division entera (modulo)
i**j  # i elevado a la potencia de j
i!=j  # i distinto de j

Con cadenas
3*"b"         # Devuelve ‘bbb’
"b"+"a"       # Devuelve ‘ba’
"c"*"c"                 # TypeError
len("psicología")       # Devuelve 10
"Psicología"[5]         # Devuelve ‘l’
"Psicología"[0:5]       # Devuelve ‘Psico’
"Psicología"[12]        # Error de indice


Numeros
contador += 1         #equivalente a contador=contador+1
porc = 5              #asigna número entero a variable
total*= var/100       #equivalente a total=total*var/100
valor = -5            #el signo - se usa para los negativos
a,b,c,d = 1,2,3,4     #Definir múltiples variables
4**1+1        #Devuelve 5
6*1**2        #Devuelve 6
(-1)**3*3     #Devuelve -3
6*3/2         #Devuelve 9.0
3/2*6         #Devuelve 9.0

logicos
1+3 == 3              #Devuelve false
2+2 == 4              #Devuelve true
3 != 2                #Devuelve true
6 > 1                 #Devuelve true
“Python”==“Python”    #Devuelve true
7 == 7      #True
7 != 7      #False
7 > 7       #False
7 >=7       #True
10 > 1      #True
10 < 1      #False
10 <=1      #False
1 < 10      #True
8>5 and 8>6 #True
8>5 and 8>9 #False
8>5 or  8>6 #True
8>5 or  8>9 #True
8>11 or 8>9 #False
8>11        #False
not (8>11)  #True
8>5         #True
not (8>5)   #Fals
